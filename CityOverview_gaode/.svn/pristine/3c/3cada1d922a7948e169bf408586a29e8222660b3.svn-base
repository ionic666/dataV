package com.cetc28.idata.controller;

import com.cetc28.idata.model.JxMapService;
import com.cetc28.idata.service.IJxMapService;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MaxUploadSizeExceededException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * *************************************************************
 * Copyright(C):中国电子科技集团公司第二十八研究所十三部
 * 项目名称：CityOverview
 * 设计人员：linyu
 * 创建日期：2017/9/24 16:36
 * 描述信息：地图图层管理接口
 * ***************************************************************
 */
@Controller
@RequestMapping("/jxmap")
public class JxMapController {

    @Autowired
    private IJxMapService jxMapService;


    /**
     * 查询基础图层信息
     * @return
     */
    @RequestMapping("queryBaseMapService.do")
    @ResponseBody
    List queryBaseMapService(){
        List list = new ArrayList();
        list = jxMapService.queryBaseMapService();
        return list;
    }

    /**
     * 根据监测指标标号获取业务图层服务信息
     * @return
     */
    @RequestMapping("queryMapServiceByIndicator.do")
    @ResponseBody
    List queryMapServiceByIndicator(){
        List list = new ArrayList();
        list = jxMapService.queryMapServiceByIndicator();
        return list;
    }

    /**
     * 根据图层id号获取图层服务信息
     * @param mapId 图层ID号
     * @return
     */
    @RequestMapping("getMapInfoById.do")
    @ResponseBody
    JxMapService getMapInfoById(String mapId){
        JxMapService result = new JxMapService();
        result = jxMapService.getMapInfoById(mapId);
        return result;
    }

    /**
     * 更新地图图层信息
     * @param mapServiceInfo 地图服务信息
     * @return
     */
    @RequestMapping("updateMapInfoService.do")
    @ResponseBody
    public String updateMapInfoService(String mapServiceInfo){
        JSONObject object = JSONObject.fromObject(mapServiceInfo);
        JxMapService mapService = (JxMapService)JSONObject.toBean(object, JxMapService.class);
        String result = jxMapService.updateMapInfoService(mapService);
        return result;
    }


    @RequestMapping("upload.do")
    @ResponseBody
    public Map upload2(HttpServletRequest request) {
        Map<String,String> ajaxResult= new HashMap<>();
        String realPath="";
        try {
             realPath = request.getSession().getServletContext().getRealPath("/");
            CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());
            if(multipartResolver.isMultipart(request)){
                MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest)request;
                Iterator<String> iter = multiRequest.getFileNames();
                while(iter.hasNext()){
                    MultipartFile file = multiRequest.getFile(iter.next());
                    if(file != null){
                        String myFileName = file.getOriginalFilename();
                        if(myFileName.trim() !=""){
                            String fileName = file.getOriginalFilename();
                            String path = realPath+"jsonData/" + fileName;
                            File localFile = new File(path);
                            file.transferTo(localFile);
                        }
                    }
                }
            }
            ajaxResult.put("success","上传成功");
            return ajaxResult;
        } catch (MaxUploadSizeExceededException e){
            throw  e;
        } catch (IOException e) {
            e.printStackTrace();
            ajaxResult.put("faile", "上传失败,请重新操作");
            return ajaxResult;
        }
    }

    @ExceptionHandler(MaxUploadSizeExceededException.class)
    public String handleException(MaxUploadSizeExceededException ex,HttpServletRequest request,HttpServletResponse response) throws Exception {
        request.setAttribute("errorMessage","上传文件太大。。。。。。。");
        request.getRequestDispatcher("/error.jsp").forward(request,response);
        return null;
    }
}
