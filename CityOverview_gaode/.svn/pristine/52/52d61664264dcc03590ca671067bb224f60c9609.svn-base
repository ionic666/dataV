<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.cetc28" />

    <context:annotation-config/>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
	<bean id="propertyConfigurer2"
		  class="com.cetc28.util.Web_srcUtil">
		<property name="locations">
			<list>
				<value>classpath:web_src.properties</value>
			</list>
		</property>
	</bean>

	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${oracle.driverClass}"></property>
		<property name="jdbcUrl" value="${oracle.url}"></property>
		<property name="user" value="${oracle.userName}"></property>
		<property name="password" value="${oracle.password}"></property>
		<property name="minPoolSize" value="${oracle.minPoolSize}" />
		<property name="maxPoolSize" value="${oracle.maxPoolSize}" />
		<property name="maxIdleTime" value="${oracle.maxIdleTime}" />
		<property name="acquireIncrement" value="${oracle.acquireIncrement}"/>
		<property name="maxStatements" value="${oracle.maxStatements}" />
	</bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${oracle.url}" />
        <property name="username" value="${oracle.userName}" />
        <property name="password" value="${oracle.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value=" SELECT 1 FROM DUAL" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 监控统计用的filter:stat
        日志用的filter:log4j
        防御sql注入的filter:wall -->
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations">
            <list>
                <!-- 自动匹配Mapper映射文件  -->
                <value>classpath*:com/cetc28/*/dao/mapper/*.xml</value>
            </list>
        </property>
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cetc28.idata.dao"/>
		<!--只有一个datasource时，无需指定sqlSessionFactorery；多于一个需要指定-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cetc28.importExcel.dao" />
		<!--只有一个datasource时，无需指定sqlSessionFactory；多于一个需要指定-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <aop:aspectj-autoproxy/>

    <bean id="websocket" class="com.cetc28.idata.controller.WebsocketEndPoint"/>

    <websocket:handlers>
        <websocket:mapping path="/websocket" handler="websocket"/>
        <websocket:handshake-interceptors>
            <bean class="com.cetc28.idata.controller.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
</beans>