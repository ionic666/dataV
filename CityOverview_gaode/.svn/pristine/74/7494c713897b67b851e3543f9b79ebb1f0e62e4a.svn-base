package com.cetc28.idata.shiro;

import java.util.ArrayList;
import java.util.List;

import com.cetc28.idata.model.Module;
import com.cetc28.idata.model.User;
import com.cetc28.idata.service.JxLoginService;
import org.apache.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AuthRealm extends AuthorizingRealm {
    @Autowired
    private  JxLoginService jxLoginService;

    public static final Logger logger = Logger.getLogger(AuthRealm.class);
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection pc) {
		logger.info("授权");
		User user = (User) pc.fromRealm(this.getName()).iterator().next();
        List<Module> modules = jxLoginService.getUserModule(user.getUserid());
        List<String> permissions = new ArrayList<String>();
            for(Module m :modules){
                permissions.add(m.getPermission());
            }
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		info.addStringPermissions(permissions);
		return info;
	}

	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		logger.info("认证");
		UsernamePasswordToken upToken  = (UsernamePasswordToken) token;
		List<User> list = jxLoginService.queryUserByName(upToken.getUsername());
		if(list!=null && list.size()>0){
			User user = list.get(0);
			AuthenticationInfo info = new SimpleAuthenticationInfo(user,user.getPassword(),this.getName());
			return info;
		}
		return null;
	}

    public void updateCachedAuthorization() {
        clearCachedAuthorizationInfo(SecurityUtils.getSubject().getPrincipals());
    }
}
