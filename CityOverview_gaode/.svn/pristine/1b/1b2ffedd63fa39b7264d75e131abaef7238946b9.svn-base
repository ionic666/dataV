package com.cetc28.util;

import org.apache.commons.lang.StringUtils;

import javax.net.ssl.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.cert.X509Certificate;

/**
 * Created with IntelliJ IDEA.
 * Name: 连接舆情系统工具类
 * User: hly
 * Date: 2016/9/13
 */
public class DataChangeUtil {

    /**
     *  用于连接外接数据接口
     * @param url
     * @return
     */
    public static String getConnectionData(String url){
        URL connect;
        StringBuffer data = new StringBuffer();
        try {
            connect = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) connect.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            OutputStreamWriter paramout = new OutputStreamWriter(connection.getOutputStream(), "UTF-8");
//            paramout.write(params);
            paramout.flush();

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
            String line;
            while ((line = reader.readLine()) != null) {
                data.append(line);
            }

            paramout.close();
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return data.toString();
    }


    /**
     *  用于连接https外接数据接口
     * @param url
     * @return
     */
    public static String connect(String url) throws Exception {
        InputStream in = null;
        OutputStream out = null;
        byte[] buffer = new byte[4096];
        String str_return = "";
        try
        {
            URL console = new URL(new String(url.getBytes("utf-8")));
            HttpURLConnection conn = (HttpURLConnection) console.openConnection();
            //如果是https
            if (conn instanceof HttpsURLConnection)
            {
                SSLContext sc = SSLContext.getInstance("SSL");
                sc.init(null, new TrustManager[]{new TrustAnyTrustManager()}, new java.security.SecureRandom());
                ((HttpsURLConnection) conn).setSSLSocketFactory(sc.getSocketFactory());
                ((HttpsURLConnection) conn).setHostnameVerifier(new TrustAnyHostnameVerifier());
            }
//            conn.setRequestProperty("Content-type", "text/html");
//            conn.setRequestProperty("Accept-Charset", "GBK");
//            conn.setRequestProperty("contentType", "GBK");
//            conn.setRequestMethod("POST");
//            conn.setDoOutput(true);
//            conn.setRequestProperty("User-Agent", "directclient");
//            PrintWriter outdate = new PrintWriter(new OutputStreamWriter(conn.getOutputStream(),"utf-8"));
//            outdate.println(url);
//            outdate.close();
            conn.connect();
            InputStream is = conn.getInputStream();
            DataInputStream indata = new DataInputStream(is);
            if(is != null){
                is.close();
            }
            String ret = "";

            while (ret != null)
            {
                ret = indata.readLine();
                if (ret != null && !ret.trim().equals(""))
                {
                    str_return = str_return + new String(ret.getBytes("utf-8"), "utf-8");
                }
            }
            conn.disconnect();
        } catch (Exception e)
        {
            throw e;
        } finally
        {
            try
            {
                if(in != null){
                    in.close();
                }
            } catch (Exception e)
            {
            }
            try
            {
                if(out != null){
                    out.close();
                }
            } catch (Exception e)
            {
            }
        }
        return str_return;
    }

    private static class TrustAnyTrustManager implements X509TrustManager {

        public void checkClientTrusted(X509Certificate[] chain, String authType) {}

        public void checkServerTrusted(X509Certificate[] chain, String authType) {}

        public X509Certificate[] getAcceptedIssuers() {
            return new X509Certificate[]{};
        }
    }

    private static class TrustAnyHostnameVerifier implements HostnameVerifier {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    }

    /**
     * 自定义格式化输出函数
     * @param d
     * @return
     */
    public static String changeDouble( Double d ) {
        String s=String.format("%f", d);//将浮点数转为字符串
        int i;
        for(i = s.length()-1; i >= 0; i-- ) //从串尾向前检查，遇到非0数据结束循环
        {
            if ( s.charAt(i) == '.' ) //遇到小数点结束，说明是个整数
                break;
            if ( s.charAt(i) != '0' ) //遇到小数中有非0值，结束
            {
                i++;
                break;
            }
        }
        return s.substring(0,i); //返回处理后的子串
    }

    /**
     * 字符串为空值返回空字符串
     * @param s
     * @return
     */
    public static String toEmptyString(String s) {
        if(StringUtils.isNotEmpty(s)){
            return s;
        }else {
            return "";
        }
    }

}