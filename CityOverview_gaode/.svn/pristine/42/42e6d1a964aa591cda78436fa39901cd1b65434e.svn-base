package com.cetc28.idata.controller;

import com.cetc28.idata.Constant.SysConstant;
import com.cetc28.idata.model.CityResult;
import com.cetc28.idata.model.PageResult;
import com.cetc28.idata.model.User;
import com.cetc28.idata.service.IJxModuleManageService;
import com.cetc28.idata.service.IjxRoleManageService;
import com.cetc28.util.Encrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by FangYan on 2017/9/21.
 */
@Controller
@RequestMapping("/manage")
public class JxRoleController {
    @Autowired
    private IjxRoleManageService ijxRoleManageService;
    @Autowired
    private IJxModuleManageService iJxModuleManageService;

    @RequestMapping("role/queryRoleName.do")
    @ResponseBody
    public List<String> queryRoleName() {
        return ijxRoleManageService.queryRoleName();
    }

    @RequestMapping("role/queryRoleInfo.do")
    @ResponseBody
    public PageResult queryRoleInfo(Integer pageNumber, Integer pageSize) {
        PageResult pageResult = ijxRoleManageService.queryRoleInfo(pageNumber, pageSize);
        return pageResult;
    }

    @RequestMapping("role/queryPermissionName.do")
    @ResponseBody
    public List<String> queryPermissionName() {
        List<String> moduleNames = iJxModuleManageService.queryModuleName();
        moduleNames.remove("用户管理");
        moduleNames.remove("角色管理");
        return moduleNames;
    }

    @RequestMapping("role/getPermissionName.do")
    @ResponseBody
    public Map getPermissionName(Integer roleid) {
        return ijxRoleManageService.getPermision(roleid);
    }

    @RequestMapping("role/getHavPermissionName.do")
    @ResponseBody
    public List getHavPermissionName(Integer roleid) {
        return ijxRoleManageService.gethavPermision(roleid);
    }

    @RequestMapping("role/addRole.do")
    @ResponseBody
    public CityResult addRole(String roleName, String descrip,@RequestParam(value = "permision[]")String[] permision, HttpSession session) {
        if(ijxRoleManageService.isExistRole(roleName)){
            return CityResult.build(400,"该角色名已存在");
        }
        Integer status=1;
        java.util.Date currentTime = new java.util.Date();
        User currentUser = (User) session.getAttribute(SysConstant.CURRENT_USER_INFO);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("rolename", roleName);
        map.put("descrip", descrip);
        map.put("create_by", currentUser.getUsername());
        map.put("create_time", new java.sql.Timestamp(currentTime.getTime()));
        map.put("update_by", currentUser.getUsername());
        map.put("update_time", new java.sql.Timestamp(currentTime.getTime()));
        map.put("status", status);
//        ijxRoleManageService.addRole(map);
        ijxRoleManageService.addRoleAndP(map,permision);
        return  CityResult.build(200,"添加成功");
    }

    @RequestMapping("role/delRole.do")
    @ResponseBody
    public CityResult delRole(Integer roleid,HttpSession session) {
        User currentUser = (User) session.getAttribute(SysConstant.CURRENT_USER_INFO);
        Integer uid=currentUser.getUserid();
        try {
            if(uid!=1){
                return CityResult.build(400,"该用户没有删除的权限");
            }
            if(roleid==0){
                return CityResult.build(400,"该角色不能删除");
            }
            ijxRoleManageService.delRoel(roleid);
            return CityResult.build(200, "删除成功");
        }catch (Exception e){
            e.printStackTrace();
            return CityResult.build(400,"删除失败，请重新操作");
        }
    }

    /**
     * 更改角色
     * @param roleid
     * @param roleName
     * @param descrip
     * @param permision
     * @param session
     * @return
     */
    @RequestMapping("role/updateRolePer.do")
    @ResponseBody
    public CityResult updateRolePer(Integer roleid,String roleName, String descrip,@RequestParam(value = "permision[]")String[] permision, HttpSession session) {
        if(!ijxRoleManageService.isChangeRoleName(roleName,roleid)){
            return CityResult.build(400,"该角色名已存在");
        }
        java.util.Date currentTime = new java.util.Date();
        User currentUser = (User) session.getAttribute(SysConstant.CURRENT_USER_INFO);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("roleid", roleid);
        map.put("rolename", roleName);
        map.put("descrip", descrip);
        map.put("update_by", currentUser.getUsername());
        map.put("update_time", new java.sql.Timestamp(currentTime.getTime()));
        ijxRoleManageService.updateRole(map,permision);
        return CityResult.ok();
    }


    /**
     * 更改角色的状态
     * @param roleid
     * @param status
     * @return
     */
    @RequestMapping("role/updateRoleStatus.do")
    @ResponseBody
    public CityResult updateRoleStatus(Integer roleid, Integer status) {
        ijxRoleManageService.updateRoleStatus(status,roleid);
        return CityResult.ok();
    }
}
